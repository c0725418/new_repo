(con_matrix_select[[1,1]] + con_matrix_select[[2,2]]) / sum(con_matrix_select)
(con_matrix_full[[1,1]] + con_matrix_full[[2,2]]) / sum(con_matrix_full)
(con_matrix_select[[1,1]] + con_matrix_select[[2,2]]) / sum(con_matrix_select)
(con_matrix_manual[[1,1]] + con_matrix_manual[[2,2]]) / sum(con_matrix_manual)
(con_matrix_full[[1,1]] + con_matrix_full[[2,2]]) / sum(con_matrix_full)
(con_matrix_select[[1,1]] + con_matrix_select[[2,2]]) / sum(con_matrix_select)
(con_matrix_manual[[1,1]] + con_matrix_manual[[2,2]]) / sum(con_matrix_manual)
library("caTools")
dataset_voice = read.csv("C:/projetos/ai/voice.csv")
dataset_voice$label <- ifelse(dataset_voice$label=="male",1,0)
# Categorical variables
dataset_voice$label <- as.factor(dataset_voice$label)
split <- sample.split(dataset_voice, SplitRatio = 0.8)
split
s_train <- subset(dataset_voice, split == "TRUE")
s_test <- subset(dataset_voice, split == "FALSE")
head(s_train)
head(s_test)
# Remove label column
s_test <- s_test[,-21]
#--------------------------------- Correlation
#install.packages("corrplot")
library("corrplot")
M <- cor(dataset_voice[,-21])
head(M)
# Zero the diagonal intersections(they all have value 1)
diag(M) <- 0
View(M)
corrplot(M, method = "shade")
# Get most p-value heavy dimensions
threshold <- 0.5
ok <- apply(abs(M) > threshold, 1, any)
ok
useful_vars = subset(ok, ok == TRUE)
useful_vars
remove_dim = names(subset(ok, ok == FALSE))
remove_dim
select_dim = as.formula(paste0("label~",paste(names(useful_vars),collapse = "+")))
select_dim
# Set variable with dimensions
full_dim = label ~ meanfreq + sd + median + Q25 + Q75 + IQR + skew + kurt + sp.ent + sfm + mode + centroid + meanfun + minfun + maxfun + meandom + mindom + maxdom + dfrange + modindx
full_dim
linearModel <- lm(cc,data = s_train, family = binomial())
summary(linearModel)
linearPred <- predict(linearModel, s_test, type = "response")
linearPred
con_matrix <- table(Actual_Value=s_train$label, Predicted_Value = linearRes > 0.5)
# Remove unused dimensions
names(s_train)
s_train_select <- subset(s_train, select=-c(minfun, maxfun, mindom, modindx))
names(s_train_select)
s_train_manual <- subset(s_train, select=c(Q25, Q75, kurt, sp.ent, sfm, meanfun, label))
head(s_train_manual)
## This model uses all columns from the dataset
logisticModel_full <- glm(full_dim, data = s_train, family = "binomial")
summary(logisticModel_full)
## This model uses columns from the dataset automatically selected by their correlation score
logisticModel_select <- glm(select_dim, data = s_train_select, family = "binomial")
summary(logisticModel_select)
## This model uses columns from the dataset manually selected by their correlation score
logisticModel_manual <- glm(label ~ Q25 + Q75 + kurt + sp.ent + sfm + meanfun, data = s_train_manual, family = "binomial")
summary(logisticModel_select)
logisticRes_full <- predict(logisticModel_full, s_test, type = "response")
head(logisticRes_full)
logisticRes_select <- predict(logisticModel_select, s_test, type = "response")
head(logisticRes_select)
logisticRes_manual <- predict(logisticModel_manual, s_test, type = "response")
head(logisticRes_manual)
con_matrix_full <- table(Actual_Value = s_test$label, Predicted_value = logisticRes_full > 0.5)
con_matrix_full
## Acc. 96% -> Columns automatically selected
con_matrix_select <- table(Actual_Value=s_test$label, Predicted_value = logisticRes_select > 0.5)
con_matrix_select
## Acc. 97% -> Columns manually selected ->
con_matrix_manual <- table(Actual_Value=s_test$label, Predicted_value = logisticRes_manual > 0.5)
con_matrix_manual
(con_matrix_full[[1,1]] + con_matrix_full[[2,2]]) / sum(con_matrix_full)
(con_matrix_select[[1,1]] + con_matrix_select[[2,2]]) / sum(con_matrix_select)
(con_matrix_manual[[1,1]] + con_matrix_manual[[2,2]]) / sum(con_matrix_manual)
con_matrix_full <- table(Actual_Value = s_test$label, Predicted_value = logisticRes_full > 0.5)
library("caTools")
dataset_voice = read.csv("C:/projetos/ai/voice.csv")
dim(dataset_voice)
head(dataset_voice)
dataset_voice$label <- ifelse(dataset_voice$label=="male",1,0)
split <- sample.split(dataset_voice, SplitRatio = 0.8)
split
s_train <- subset(dataset_voice, split == "TRUE")
s_test <- subset(dataset_voice, split == "FALSE")
head(s_train)
head(s_test)
# Remove label column
s_test <- s_test[,-21]
#--------------------------------- Correlation
#install.packages("corrplot")
library("corrplot")
M <- cor(dataset_voice[,-21])
head(M)
# Zero the diagonal intersections(they all have value 1)
diag(M) <- 0
View(M)
corrplot(M, method = "shade")
# Get most p-value heavy dimensions
threshold <- 0.5
ok <- apply(abs(M) > threshold, 1, any)
ok
useful_vars = subset(ok, ok == TRUE)
useful_vars
remove_dim = names(subset(ok, ok == FALSE))
remove_dim
select_dim = as.formula(paste0("label~",paste(names(useful_vars),collapse = "+")))
select_dim
# Set variable with dimensions
full_dim = label ~ meanfreq + sd + median + Q25 + Q75 + IQR + skew + kurt + sp.ent + sfm + mode + centroid + meanfun + minfun + maxfun + meandom + mindom + maxdom + dfrange + modindx
full_dim
# Remove unused dimensions
names(s_train)
s_train_select <- subset(s_train, select=-c(minfun, maxfun, mindom, modindx))
names(s_train_select)
s_train_manual <- subset(s_train, select=c(Q25, Q75, kurt, sp.ent, sfm, meanfun, label))
head(s_train_manual)
## This model uses all columns from the dataset
logisticModel_full <- glm(full_dim, data = s_train, family = "binomial")
summary(logisticModel_full)
## This model uses columns from the dataset automatically selected by their correlation score
logisticModel_select <- glm(select_dim, data = s_train_select, family = "binomial")
summary(logisticModel_select)
## This model uses columns from the dataset manually selected by their correlation score
logisticModel_manual <- glm(label ~ Q25 + Q75 + kurt + sp.ent + sfm + meanfun, data = s_train_manual, family = "binomial")
summary(logisticModel_select)
logisticRes_full <- predict(logisticModel_full, s_test, type = "response")
head(logisticRes_full)
logisticRes_select <- predict(logisticModel_select, s_test, type = "response")
head(logisticRes_select)
logisticRes_manual <- predict(logisticModel_manual, s_test, type = "response")
head(logisticRes_manual)
con_matrix_full <- table(Actual_Value = s_test$label, Predicted_value = logisticRes_full > 0.5)
head(s_test)
s_train <- subset(dataset_voice, split == "TRUE")
s_test <- subset(dataset_voice, split == "FALSE")
head(s_train)
head(s_test)
#--------------------------------- Correlation
#install.packages("corrplot")
library("corrplot")
M <- cor(dataset_voice[,-21])
head(M)
# Zero the diagonal intersections(they all have value 1)
diag(M) <- 0
corrplot(M, method = "shade")
# Get most p-value heavy dimensions
threshold <- 0.5
ok <- apply(abs(M) > threshold, 1, any)
ok
useful_vars = subset(ok, ok == TRUE)
useful_vars
remove_dim = names(subset(ok, ok == FALSE))
remove_dim
select_dim = as.formula(paste0("label~",paste(names(useful_vars),collapse = "+")))
select_dim
# Set variable with dimensions
full_dim = label ~ meanfreq + sd + median + Q25 + Q75 + IQR + skew + kurt + sp.ent + sfm + mode + centroid + meanfun + minfun + maxfun + meandom + mindom + maxdom + dfrange + modindx
full_dim
# Remove unused dimensions
names(s_train)
s_train_select <- subset(s_train, select=-c(minfun, maxfun, mindom, modindx))
names(s_train_select)
s_train_manual <- subset(s_train, select=c(Q25, Q75, kurt, sp.ent, sfm, meanfun, label))
head(s_train_manual)
## This model uses all columns from the dataset
logisticModel_full <- glm(full_dim, data = s_train, family = "binomial")
summary(logisticModel_full)
## This model uses columns from the dataset automatically selected by their correlation score
logisticModel_select <- glm(select_dim, data = s_train_select, family = "binomial")
summary(logisticModel_select)
## This model uses columns from the dataset manually selected by their correlation score
logisticModel_manual <- glm(label ~ Q25 + Q75 + kurt + sp.ent + sfm + meanfun, data = s_train_manual, family = "binomial")
summary(logisticModel_select)
logisticRes_full <- predict(logisticModel_full, s_test, type = "response")
head(logisticRes_full)
logisticRes_select <- predict(logisticModel_select, s_test, type = "response")
head(logisticRes_select)
logisticRes_manual <- predict(logisticModel_manual, s_test, type = "response")
head(logisticRes_manual)
con_matrix_full <- table(Actual_Value = s_test$label, Predicted_value = logisticRes_full > 0.5)
con_matrix_full
con_matrix_select <- table(Actual_Value=s_test$label, Predicted_value = logisticRes_select > 0.5)
con_matrix_select
con_matrix_manual <- table(Actual_Value=s_test$label, Predicted_value = logisticRes_manual > 0.5)
con_matrix_manual
s_test$label
logisticRes_full > 0.5
s_test$label
head(s_test)
dataset_voice$label <- ifelse(dataset_voice$label=="male",1,0)
dataset_voice = read.csv("C:/projetos/ai/voice.csv")
head(dataset_voice)
dim(dataset_voice)
dataset_voice$label <- ifelse(dataset_voice$label=="male",1,0)
# Categorical variables
dataset_voice$label <- as.factor(dataset_voice$label)
split <- sample.split(dataset_voice, SplitRatio = 0.8)
split
s_train <- subset(dataset_voice, split == "TRUE")
s_test <- subset(dataset_voice, split == "FALSE")
head(s_train)
head(s_test)
#--------------------------------- Correlation
#install.packages("corrplot")
library("corrplot")
M <- cor(dataset_voice[,-21])
head(M)
# Zero the diagonal intersections(they all have value 1)
diag(M) <- 0
corrplot(M, method = "shade")
# Get most p-value heavy dimensions
threshold <- 0.5
ok <- apply(abs(M) > threshold, 1, any)
ok
useful_vars = subset(ok, ok == TRUE)
useful_vars
remove_dim = names(subset(ok, ok == FALSE))
remove_dim
select_dim = as.formula(paste0("label~",paste(names(useful_vars),collapse = "+")))
select_dim
# Set variable with dimensions
full_dim = label ~ meanfreq + sd + median + Q25 + Q75 + IQR + skew + kurt + sp.ent + sfm + mode + centroid + meanfun + minfun + maxfun + meandom + mindom + maxdom + dfrange + modindx
full_dim
# Remove unused dimensions
names(s_train)
s_train_select <- subset(s_train, select=-c(minfun, maxfun, mindom, modindx))
names(s_train_select)
s_train_manual <- subset(s_train, select=c(Q25, Q75, kurt, sp.ent, sfm, meanfun, label))
head(s_train_manual)
## This model uses all columns from the dataset
logisticModel_full <- glm(full_dim, data = s_train, family = "binomial")
summary(logisticModel_full)
## This model uses columns from the dataset automatically selected by their correlation score
logisticModel_select <- glm(select_dim, data = s_train_select, family = "binomial")
summary(logisticModel_select)
## This model uses columns from the dataset manually selected by their correlation score
logisticModel_manual <- glm(label ~ Q25 + Q75 + kurt + sp.ent + sfm + meanfun, data = s_train_manual, family = "binomial")
summary(logisticModel_select)
logisticRes_full <- predict(logisticModel_full, s_test, type = "response")
head(logisticRes_full)
logisticRes_select <- predict(logisticModel_select, s_test, type = "response")
head(logisticRes_select)
logisticRes_manual <- predict(logisticModel_manual, s_test, type = "response")
head(logisticRes_manual)
# Check models acc
s_test$label
logisticRes_full > 0.5
con_matrix_full <- table(Actual_Value = s_test$label, Predicted_value = logisticRes_full > 0.5)
con_matrix_full
con_matrix_select <- table(Actual_Value=s_test$label, Predicted_value = logisticRes_select > 0.5)
con_matrix_select
con_matrix_manual <- table(Actual_Value=s_test$label, Predicted_value = logisticRes_manual > 0.5)
con_matrix_manual
## Acc. 96% -> All columns
(con_matrix_full[[1,1]] + con_matrix_full[[2,2]]) / sum(con_matrix_full)
## Acc. 96% -> Columns automatically selected
(con_matrix_select[[1,1]] + con_matrix_select[[2,2]]) / sum(con_matrix_select)
## Acc. 97% -> Columns manually selected
(con_matrix_manual[[1,1]] + con_matrix_manual[[2,2]]) / sum(con_matrix_manual)
View(dataset_voice)
dataset_voice = read.csv("C:/projetos/ai/voice.csv")
head(dataset_voice)
dim(dataset_voice)
dataset_voice$label <- ifelse(dataset_voice$label=="male",TRUE,FALSE)
split <- sample.split(dataset_voice, SplitRatio = 0.8)
split
s_train <- subset(dataset_voice, split == "TRUE")
s_test <- subset(dataset_voice, split == "FALSE")
head(s_train)
head(s_test)
#--------------------------------- Correlation
#install.packages("corrplot")
library("corrplot")
M <- cor(dataset_voice[,-21])
head(M)
# Zero the diagonal intersections(they all have value 1)
diag(M) <- 0
corrplot(M, method = "shade")
# Get most p-value heavy dimensions
threshold <- 0.5
ok <- apply(abs(M) > threshold, 1, any)
ok
useful_vars = subset(ok, ok == TRUE)
useful_vars
remove_dim = names(subset(ok, ok == FALSE))
remove_dim
select_dim = as.formula(paste0("label~",paste(names(useful_vars),collapse = "+")))
select_dim
# Set variable with dimensions
full_dim = label ~ meanfreq + sd + median + Q25 + Q75 + IQR + skew + kurt + sp.ent + sfm + mode + centroid + meanfun + minfun + maxfun + meandom + mindom + maxdom + dfrange + modindx
full_dim
# Remove unused dimensions
names(s_train)
s_train_select <- subset(s_train, select=-c(minfun, maxfun, mindom, modindx))
names(s_train_select)
s_train_manual <- subset(s_train, select=c(Q25, Q75, kurt, sp.ent, sfm, meanfun, label))
head(s_train_manual)
## This model uses all columns from the dataset
logisticModel_full <- glm(full_dim, data = s_train, family = "binomial")
summary(logisticModel_full)
## This model uses columns from the dataset automatically selected by their correlation score
logisticModel_select <- glm(select_dim, data = s_train_select, family = "binomial")
summary(logisticModel_select)
## This model uses columns from the dataset manually selected by their correlation score
logisticModel_manual <- glm(label ~ Q25 + Q75 + kurt + sp.ent + sfm + meanfun, data = s_train_manual, family = "binomial")
summary(logisticModel_select)
logisticRes_full <- predict(logisticModel_full, s_test, type = "response")
head(logisticRes_full)
logisticRes_select <- predict(logisticModel_select, s_test, type = "response")
head(logisticRes_select)
logisticRes_manual <- predict(logisticModel_manual, s_test, type = "response")
head(logisticRes_manual)
# Check models acc
s_test$label
con_matrix_full <- table(Actual_Value = s_test$label, Predicted_value = logisticRes_full > 0.5)
con_matrix_full
con_matrix_select <- table(Actual_Value=s_test$label, Predicted_value = logisticRes_select > 0.5)
con_matrix_select
con_matrix_manual <- table(Actual_Value=s_test$label, Predicted_value = logisticRes_manual > 0.5)
con_matrix_manual
## Acc. 96% -> All columns
(con_matrix_full[[1,1]] + con_matrix_full[[2,2]]) / sum(con_matrix_full)
## Acc. 96% -> Columns automatically selected
(con_matrix_select[[1,1]] + con_matrix_select[[2,2]]) / sum(con_matrix_select)
## Acc. 97% -> Columns manually selected
(con_matrix_manual[[1,1]] + con_matrix_manual[[2,2]]) / sum(con_matrix_manual)
source('C:/projetos/ai/Lab01_RCode_4.r')
library("caTools")
#---------------------------------
#1. Reading and printing data in CSV file.
#---------------------------------
# Load the dataset from:
dataset_voice = read.csv("C:/projetos/ai/voice.csv")
head(dataset_voice)
dim(dataset_voice)
View(dataset_voice)
#---------------------------------
#2. Data munging
#---------------------------------
dataset_voice$label <- ifelse(dataset_voice$label=="male",1,0)
#dataset_voice$label <- as.factor(dataset_voice$label)
#---------------------------------
#3 Split the data
#---------------------------------
# Categorical variables
dataset_voice$label <- as.factor(dataset_voice$label)
split <- sample.split(dataset_voice, SplitRatio = 0.8)
split
s_train <- subset(dataset_voice, split == "TRUE")
s_test <- subset(dataset_voice, split == "FALSE")
head(s_train)
head(s_test)
# Remove label column
#s_test <- s_test[,-21]
#--------------------------------- Correlation
#install.packages("corrplot")
library("corrplot")
M <- cor(dataset_voice[,-21])
head(M)
# Zero the diagonal intersections(they all have value 1)
diag(M) <- 0
corrplot(M, method = "shade")
# Get most p-value heavy dimensions
threshold <- 0.5
ok <- apply(abs(M) > threshold, 1, any)
ok
useful_vars = subset(ok, ok == TRUE)
useful_vars
remove_dim = names(subset(ok, ok == FALSE))
remove_dim
select_dim = as.formula(paste0("label~",paste(names(useful_vars),collapse = "+")))
select_dim
# Set variable with dimensions
full_dim = label ~ meanfreq + sd + median + Q25 + Q75 + IQR + skew + kurt + sp.ent + sfm + mode + centroid + meanfun + minfun + maxfun + meandom + mindom + maxdom + dfrange + modindx
full_dim
#---------------------------------
#5. Logistic Regression model
#---------------------------------
# Remove unused dimensions
names(s_train)
s_train_select <- subset(s_train, select=-c(minfun, maxfun, mindom, modindx))
names(s_train_select)
s_train_manual <- subset(s_train, select=c(Q25, Q75, kurt, sp.ent, sfm, meanfun, label))
head(s_train_manual)
# Train the model
## This model uses all columns from the dataset
logisticModel_full <- glm(full_dim, data = s_train, family = "binomial")
summary(logisticModel_full)
## This model uses columns from the dataset automatically selected by their correlation score
logisticModel_select <- glm(select_dim, data = s_train_select, family = "binomial")
summary(logisticModel_select)
## This model uses columns from the dataset manually selected by their correlation score
logisticModel_manual <- glm(label ~ Q25 + Q75 + kurt + sp.ent + sfm + meanfun, data = s_train_manual, family = "binomial")
summary(logisticModel_select)
# Run model with test data
logisticRes_full <- predict(logisticModel_full, s_test, type = "response")
head(logisticRes_full)
logisticRes_select <- predict(logisticModel_select, s_test, type = "response")
head(logisticRes_select)
logisticRes_manual <- predict(logisticModel_manual, s_test, type = "response")
head(logisticRes_manual)
# Check models acc
s_test$label
logisticRes_full > 0.5
con_matrix_full <- table(Actual_Value = s_test$label, Predicted_value = logisticRes_full > 0.5)
con_matrix_full
con_matrix_select <- table(Actual_Value=s_test$label, Predicted_value = logisticRes_select > 0.5)
con_matrix_select
con_matrix_manual <- table(Actual_Value=s_test$label, Predicted_value = logisticRes_manual > 0.5)
con_matrix_manual
# Accuracy
## Acc. 96% -> All columns
(con_matrix_full[[1,1]] + con_matrix_full[[2,2]]) / sum(con_matrix_full)
## Acc. 96% -> Columns automatically selected
(con_matrix_select[[1,1]] + con_matrix_select[[2,2]]) / sum(con_matrix_select)
## Acc. 97% -> Columns manually selected
(con_matrix_manual[[1,1]] + con_matrix_manual[[2,2]]) / sum(con_matrix_manual)
library("caTools")
#---------------------------------
#1. Reading and printing data in CSV file.
#---------------------------------
# Load the dataset from:
dataset_voice = read.csv("C:/projetos/ai/voice.csv")
head(dataset_voice)
dim(dataset_voice)
#---------------------------------
#2. Data munging
#---------------------------------
dataset_voice$label <- ifelse(dataset_voice$label=="male",TRUE,FALSE)
# Categorical variables
#dataset_voice$label <- as.factor(dataset_voice$label)
#---------------------------------
#3 Split the data
#---------------------------------
split <- sample.split(dataset_voice, SplitRatio = 0.8)
split
s_train <- subset(dataset_voice, split == "TRUE")
s_test <- subset(dataset_voice, split == "FALSE")
head(s_train)
head(s_test)
#--------------------------------- Correlation
#install.packages("corrplot")
library("corrplot")
M <- cor(dataset_voice[,-21])
head(M)
# Zero the diagonal intersections(they all have value 1)
diag(M) <- 0
corrplot(M, method = "shade")
# Get most p-value heavy dimensions
threshold <- 0.5
ok <- apply(abs(M) > threshold, 1, any)
ok
useful_vars = subset(ok, ok == TRUE)
useful_vars
remove_dim = names(subset(ok, ok == FALSE))
remove_dim
select_dim = as.formula(paste0("label~",paste(names(useful_vars),collapse = "+")))
select_dim
# Set variable with dimensions
full_dim = label ~ meanfreq + sd + median + Q25 + Q75 + IQR + skew + kurt + sp.ent + sfm + mode + centroid + meanfun + minfun + maxfun + meandom + mindom + maxdom + dfrange + modindx
full_dim
#---------------------------------
#5. Logistic Regression model
#---------------------------------
# Remove unused dimensions
names(s_train)
s_train_select <- subset(s_train, select=-c(minfun, maxfun, mindom, modindx))
names(s_train_select)
s_train_manual <- subset(s_train, select=c(Q25, Q75, kurt, sp.ent, sfm, meanfun, label))
head(s_train_manual)
# Train the model
## This model uses all columns from the dataset
logisticModel_full <- glm(full_dim, data = s_train, family = "binomial")
summary(logisticModel_full)
## This model uses columns from the dataset automatically selected by their correlation score
logisticModel_select <- glm(select_dim, data = s_train_select, family = "binomial")
summary(logisticModel_select)
## This model uses columns from the dataset manually selected by their correlation score
logisticModel_manual <- glm(label ~ Q25 + Q75 + kurt + sp.ent + sfm + meanfun, data = s_train_manual, family = "binomial")
summary(logisticModel_select)
# Run model with test data
logisticRes_full <- predict(logisticModel_full, s_test, type = "response")
head(logisticRes_full)
logisticRes_select <- predict(logisticModel_select, s_test, type = "response")
head(logisticRes_select)
logisticRes_manual <- predict(logisticModel_manual, s_test, type = "response")
head(logisticRes_manual)
# Check models acc
con_matrix_full <- table(Actual_Value = s_test$label, Predicted_value = logisticRes_full > 0.5)
con_matrix_full
con_matrix_select <- table(Actual_Value=s_test$label, Predicted_value = logisticRes_select > 0.5)
con_matrix_select
con_matrix_manual <- table(Actual_Value=s_test$label, Predicted_value = logisticRes_manual > 0.5)
con_matrix_manual
# Accuracy
## Acc. 96% -> All columns
(con_matrix_full[[1,1]] + con_matrix_full[[2,2]]) / sum(con_matrix_full)
## Acc. 96% -> Columns automatically selected
(con_matrix_select[[1,1]] + con_matrix_select[[2,2]]) / sum(con_matrix_select)
## Acc. 97% -> Columns manually selected
(con_matrix_manual[[1,1]] + con_matrix_manual[[2,2]]) / sum(con_matrix_manual)
con_matrix_manual
con_matrix_select
con_matrix_full
con_matrix_select
con_matrix_manual
savehistory("C:/projetos/ai/history.Rhistory")
